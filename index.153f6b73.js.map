{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,S,iEAyFMC,EAAU,IAAb,W,sBApFGC,I,aAEFC,KAAKC,QAAU,CACbC,QALW,kDAMXC,OAAQ,CACNC,IAAK,KACLC,IAAK,KACLC,MAAOC,EAAAC,KAAKC,QACZC,MAAO,WAGXV,KAAKW,SAAW,I,iBAGZC,IAAA,a,MAAN,W,kBAAAC,EAAAjB,EAAA,CAAAiB,EAAAC,GAAAC,MAAA,SAAAC,I,IACQC,E,kFAAiBC,EAAAC,QAAMC,IAAI,GAAwBC,OAArBC,EAAKrB,QAAQC,SAAWoB,EAAKrB,S,cAA3DgB,EAAQM,EAAAC,K,kBACPP,EAASQ,M,0CAFlB,E,IAIAb,IAAA,sB,MAAA,WACE,GAAIc,UAAUC,YACZ,OAAOD,UAAUC,YAAYC,mBAAmBC,EAAWC,GAE3DC,MAAM,2C,IAGVnB,IAAA,sB,MAAA,SAAoBa,GAClB,IAAMO,EAAiBC,SAASC,cAAc,YACxCC,EAAYnC,KAAKoC,cAAcpC,KAAKW,UAEpC0B,EAAS,mEAIchB,OAFPiB,KAAKC,MAAMd,EAAKe,KAAKC,MAAM,wEAOxBpB,OALII,EAAKiB,QAAQ,GAAGF,KAAK,4NAUbnB,OALZI,EAAKkB,KAAK,qFAUnCtB,OALqCI,EAAKiB,QAAQ,GAAGE,KAAK,2GAQ1DvB,OAHAc,EAAUU,UAAU,8CAGExB,OAAtBc,EAAUW,SAAS,KAA0BzB,OAAvBc,EAAUY,UAAU,KAAsB1B,OAAnBc,EAAUa,SAAS,sKAGhEhB,EAAeiB,UAAYZ,C,IAE7BzB,IAAA,gB,MAAA,SAAcsC,GACZ,IAcMC,EAAW,IAAIC,KAAKF,GAS1B,MAPoB,CAClBL,UAjBW,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAiBtCM,EAASE,UACzBP,SAAUK,EAASG,UACnBN,SAAUG,EAASI,cACnBR,UAnBY,CACZ,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OAQiBI,EAASK,Y,OAO7B,IAIH,SAAS3B,EAAU4B,GACjB,IAAgCC,EAAAD,EAASE,OAAjCC,EAAwBF,EAAxBE,SAAUC,EAAcH,EAAdG,UAElB/D,EAAQa,SAAW8C,EAASK,UAC5BhE,EAAQG,QAAQE,OAAOC,IAAMwD,EAC7B9D,EAAQG,QAAQE,OAAOE,IAAMwD,EAE7B/D,EACGiE,aACAC,MAAK,SAAA/C,GACJnB,EAAQmE,oBAAoBhD,E,IAE7BiD,OAAM,SAAAC,G,OAAKC,QAAQC,IAAIF,E,IAG5B,SAASrC,EAAQwC,GACfF,QAAQC,IAAI,eAAaC,E,CAlB3BC,iBAAiB,mBAAoBzE,EAAQ0E,oB","sources":["src/js/axios/axios-weather.js"],"sourcesContent":["import axios from 'axios';\nimport { KEYS } from '../axios/axiosDefaults';\n\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5/weather';\n\nclass Weather {\n  constructor() {\n    this.options = {\n      baseURL: BASE_URL,\n      params: {\n        lat: null,\n        lon: null,\n        appid: KEYS.WEATHER,\n        units: 'metric',\n      },\n    };\n    this.userTime = null;\n  }\n\n  async getWeather() {\n    const response = await axios.get(`${this.options.baseURL}`, this.options);\n    return response.data;\n  }\n  checkNavPermissions() {\n    if (navigator.geolocation) {\n      return navigator.geolocation.getCurrentPosition(onSuccess, onError);\n    } else {\n      alert('Your browser not support geolocation api');\n    }\n  }\n  renderweatherMarkup(data) {\n    const weatherBlockEl = document.querySelector('.weather');\n    const localDate = this.dateFormatter(this.userTime);\n\n    const markup = `\n    <div class=\"weather__info info\">\n  <p class=\"info__temp\">${Math.floor(data.main.temp)}Â°</p>\n  <div class=\"info-wrapper\">\n    <p class=\"info__situation\">${data.weather[0].main}</p>\n    <div class=\"info-wrapper-items\">\n      <svg class=\"info-wrapper__svg\" width=\"18\" height=\"18\">\n        <use class=\"geo\" href=\"../images/icons.svg#icon-geo\"></use>\n      </svg>\n      <p class=\"info__geo\">${data.name}</p>\n    </div>\n  </div>\n</div>\n<img\n  src=\"http://openweathermap.org/img/w/${data.weather[0].icon}.png\"\n  alt=\"image of sun\"\n  width=\"128\"\n  class=\"weather-img\"\n/><p class=\"weather__date-week\">\n  ${localDate.dayOfWeek}\n</p>\n<p class=\"weather__date-date\">\n  ${localDate.dateUser} ${localDate.dateMonth} ${localDate.dateYear}\n</p>\n<a class=\"weather__link\" href=\"https://weather.com/weather/tenday/l/35a741555bbfc8bc576be864b0b64af6d1b2ad1328d2ee729f0de0ae00098e85\">weather for week</a>`;\n    weatherBlockEl.innerHTML = markup;\n  }\n  dateFormatter(date) {\n    const days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n    const month = [\n      'Jan',\n      'Feb',\n      'Mar',\n      'Apr',\n      'May',\n      'Jun',\n      'Jul',\n      'Aug',\n      'Sep',\n      'Nov',\n      'Dec',\n    ];\n    const userDate = new Date(date);\n\n    const weatherDate = {\n      dayOfWeek: days[userDate.getDay()],\n      dateUser: userDate.getDate(),\n      dateYear: userDate.getFullYear(),\n      dateMonth: month[userDate.getMonth()],\n    };\n\n    return weatherDate;\n  }\n}\n\nconst weather = new Weather();\n\naddEventListener('DOMContentLoaded', weather.checkNavPermissions);\n\nfunction onSuccess(position) {\n  const { latitude, longitude } = position.coords;\n\n  weather.userTime = position.timestamp;\n  weather.options.params.lat = latitude;\n  weather.options.params.lon = longitude;\n\n  weather\n    .getWeather()\n    .then(response => {\n      weather.renderweatherMarkup(response);\n    })\n    .catch(e => console.log(e));\n}\n\nfunction onError(error) {\n  console.log('error -->', error);\n}\n"],"names":["$bpxeT","parcelRequire","$be1a52d01bfabf31$var$weather","Weather","this","options","baseURL","params","lat","lon","appid","$6rPMf","KEYS","WEATHER","units","userTime","key","$parcel$interopDefault","$2TvXO","mark","_callee","response","$dIxxU","default","get","concat","_this","_ctx","sent","data","navigator","geolocation","getCurrentPosition","$be1a52d01bfabf31$var$onSuccess","$be1a52d01bfabf31$var$onError","alert","weatherBlockEl","document","querySelector","localDate","dateFormatter","markup","Math","floor","main","temp","weather","name","icon","dayOfWeek","dateUser","dateMonth","dateYear","innerHTML","date","userDate","Date","getDay","getDate","getFullYear","getMonth","position","_coords","coords","latitude","longitude","timestamp","getWeather","then","renderweatherMarkup","catch","e","console","log","error","addEventListener","checkNavPermissions"],"version":3,"file":"index.153f6b73.js.map"}